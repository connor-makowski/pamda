window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pamda", "modulename": "pamda", "kind": "module", "doc": "<h1 id=\"pamda\">Pamda</h1>\n\n<p><a href=\"https://badge.fury.io/py/pamda\"><img src=\"https://badge.fury.io/py/pamda.svg\" alt=\"PyPI version\" /></a>\n<a href=\"https://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License: MIT\" /></a></p>\n\n<p>Python wrapper for functional programming in object oriented structures.</p>\n\n<p>Inspired heavily by <a href=\"https://ramdajs.com/docs/\">Ramda</a>.</p>\n\n<h2 id=\"documentation-for-pamda-functions\">Documentation for Pamda Functions</h2>\n\n<p><a href=\"https://connor-makowski.github.io/pamda/pamda/pamda.html\">https://connor-makowski.github.io/pamda/pamda/pamda.html</a></p>\n\n<h2 id=\"key-features\">Key Features</h2>\n\n<ul>\n<li>Simplified functional programming for python</li>\n<li>Core Functions include:\n<ul>\n<li><code>curry</code> arbitrary methods and functions</li>\n<li><code>thunkify</code> arbitrary methods and functions</li>\n<li><code>pipe</code> data iteratively through n functions</li>\n</ul></li>\n<li>List based path access and features for nested dictionaries</li>\n</ul>\n\n<h2 id=\"setup\">Setup</h2>\n\n<p>Make sure you have Python 3.9.x (or higher) installed on your system. You can download it <a href=\"https://www.python.org/downloads/\">here</a>.</p>\n\n<h3 id=\"installation\">Installation</h3>\n\n<pre><code>pip install pamda\n</code></pre>\n\n<h2 id=\"getting-started\">Getting Started</h2>\n\n<h3 id=\"basic-usage\">Basic Usage</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">pamda</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">pamda</span>\n\n<span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">}}</span>\n<span class=\"c1\"># Example: Select data given a path and a dictionary</span>\n<span class=\"n\">pamda</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">([</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">])(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; 1</span>\n\n<span class=\"c1\"># See documentation for all core pamda functions at</span>\n<span class=\"c1\"># https://connor-makowski.github.io/pamda/pamda.html</span>\n</code></pre>\n</div>\n\n<h3 id=\"curry-usage\">Curry Usage</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">pamda</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">pamda</span>\n\n<span class=\"c1\"># Define a function that you want to curry</span>\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">myFunction</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># You can call pamda.curry as a function to curry your functions</span>\n<span class=\"n\">curriedMyFn</span><span class=\"o\">=</span><span class=\"n\">pamda</span><span class=\"o\">.</span><span class=\"n\">curry</span><span class=\"p\">(</span><span class=\"n\">myFunction</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Inputs can now be passed in an async fashion</span>\n<span class=\"c1\"># The function is evaluated when all inputs are added</span>\n<span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">curriedMyFn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; [1,2,3]</span>\n<span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; [1,2,4]</span>\n\n<span class=\"c1\"># Each set of inputs returns a callable function</span>\n<span class=\"c1\"># You can stack inputs on a single line for clean functional programming</span>\n<span class=\"n\">curriedMyFn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; [1,2,3]</span>\n</code></pre>\n</div>\n\n<p>For enforcing types, pamda relies on <a href=\"https://github.com/connor-makowski/type_enforced\">type_enforced</a> but curried objects do not play nice with <code>type_enforced</code> objects. To fix this, there is a special curry function, <code>curryType</code>, that enables type_enforced annotations for your curried functions:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">pamda</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">pamda</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Pamda CurryTyped</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@pamda</span><span class=\"o\">.</span><span class=\"n\">curryTyped</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"mf\">1.5</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;&lt;stdin&gt;&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/conmak/development/personal/pamda/pamda/pamda_curry.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__call__</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__fnExecute__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">new_args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">new_kwargs</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/conmak/development/personal/pamda/venv/lib/python3.10/site-packages/type_enforced/enforcer.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__call__</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__check_type__</span><span class=\"p\">(</span><span class=\"n\">assigned_vars</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">),</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/conmak/development/personal/pamda/venv/lib/python3.10/site-packages/type_enforced/enforcer.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">112</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">__check_type__</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__exception__</span><span class=\"p\">(</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/conmak/development/personal/pamda/venv/lib/python3.10/site-packages/type_enforced/enforcer.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">__exception__</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;(</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__fn__</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"si\">}</span><span class=\"s2\">): </span><span class=\"si\">{</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">):</span> <span class=\"n\">Type</span> <span class=\"n\">mismatch</span> <span class=\"k\">for</span> <span class=\"n\">typed</span> <span class=\"n\">variable</span> <span class=\"err\">`</span><span class=\"n\">b</span><span class=\"err\">`</span><span class=\"o\">.</span> <span class=\"n\">Expected</span> <span class=\"n\">one</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"err\">`</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"err\">&#39;</span><span class=\"nc\">int</span><span class=\"s1\">&#39;&gt;]` but got `&lt;class &#39;</span><span class=\"nb\">float</span><span class=\"s1\">&#39;&gt;` instead.</span>\n</code></pre>\n</div>\n\n<h3 id=\"thunkify-usage\">Thunkify Usage</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">pamda</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">pamda</span>\n\n<span class=\"c1\"># Define a function that you want to thunkify</span>\n<span class=\"c1\"># thunkify can be called as a function or decorator</span>\n<span class=\"nd\">@pamda</span><span class=\"o\">.</span><span class=\"n\">thunkify</span>\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">myFunction</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># The function is now curried and the evaluation is lazy</span>\n<span class=\"c1\"># This means the function is not evaluated until called</span>\n<span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">myFunction</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; &lt;pamda.curry_obj object at 0x7fd514e4c820&gt;</span>\n<span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)()</span> <span class=\"c1\">#=&gt; [1,2,3]</span>\n\n<span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">y</span><span class=\"p\">()</span> <span class=\"c1\">#=&gt; [1,2,4]</span>\n</code></pre>\n</div>\n\n<p>Thunkified functions can be executed asynchronously.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">pamda</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">pamda</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">time</span>\n\n<span class=\"nd\">@pamda</span><span class=\"o\">.</span><span class=\"n\">thunkify</span>\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">wait</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s1\"> start&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">wait</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s1\"> end&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">wait</span>\n\n<span class=\"n\">async_test_a</span> <span class=\"o\">=</span> <span class=\"n\">pamda</span><span class=\"o\">.</span><span class=\"n\">asyncRun</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">async_test_b</span> <span class=\"o\">=</span> <span class=\"n\">pamda</span><span class=\"o\">.</span><span class=\"n\">asyncRun</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">async_test_a</span><span class=\"o\">.</span><span class=\"n\">asyncWait</span><span class=\"p\">()</span>\n<span class=\"n\">async_test_c</span> <span class=\"o\">=</span> <span class=\"n\">pamda</span><span class=\"o\">.</span><span class=\"n\">asyncRun</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>The above code would output:</p>\n\n<pre><code>a start\nb start\nb end\na end\nc start\nc end\n</code></pre>\n\n<h3 id=\"pipe\">Pipe</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">pamda</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">pamda</span>\n\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">square</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">half</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">negate</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">x</span>\n\n<span class=\"c1\"># You can pipe data through multiple functions for clean functional programming</span>\n<span class=\"n\">pamda</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">([</span><span class=\"n\">square</span><span class=\"p\">,</span> <span class=\"n\">half</span><span class=\"p\">,</span> <span class=\"n\">negate</span><span class=\"p\">])(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,),</span><span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{})</span> <span class=\"c1\">#=&gt; -18</span>\n</code></pre>\n</div>\n\n<h3 id=\"use-pamda-as-a-subclass\">Use pamda as a subclass</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">pamda</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">pamda</span>\n\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">myClass</span><span class=\"p\">(</span><span class=\"n\">pamda</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">myFunction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">inc</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n\n<span class=\"n\">mc</span><span class=\"o\">=</span><span class=\"n\">myClass</span><span class=\"p\">()</span>\n<span class=\"n\">mc</span><span class=\"o\">.</span><span class=\"n\">myFunction</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; 3</span>\n\n<span class=\"nd\">@mc</span><span class=\"o\">.</span><span class=\"n\">curry</span>\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">addUp</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n\n<span class=\"n\">addUp</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; 3</span>\n</code></pre>\n</div>\n\n<h2 id=\"pamda-utils\">Pamda Utils</h2>\n\n<ul>\n<li>Pamda also ships with a few helpful utilities</li>\n<li>Check out the documentation here:\n<ul>\n<li><a href=\"https://connor-makowski.github.io/pamda/pamda_utils.html\"><a href=\"https://connor-makowski.github.io/pamda/pamda_utils.html\">https://connor-makowski.github.io/pamda/pamda_utils.html</a></a></li>\n</ul></li>\n</ul>\n"}, {"fullname": "pamda.pamda", "modulename": "pamda.pamda", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pamda.pamda.pamda", "modulename": "pamda.pamda", "qualname": "pamda", "kind": "class", "doc": "<p></p>\n", "bases": "pamda.pamda_utils.pamda_utils"}, {"fullname": "pamda.pamda.pamda.accumulate", "modulename": "pamda.pamda", "qualname": "pamda.accumulate", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Returns an accumulated list of items by iterating a function starting with an accumulator over a list</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: function | method</li>\n<li>What: The function or method to reduce</li>\n<li>Note: This function should have an arity of 2 (take two inputs)</li>\n<li>Note: The first input should take the accumulator value</li>\n<li>Note: The second input should take the data value\n-<code>initial_accumulator</code>:</li>\n<li>Type: any</li>\n<li>What: The initial item to pass into the function when starting the accumulation process</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: list</li>\n<li>What: The list of items to iterate over</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data=[1,2,3,4]\npamda.accumulate(\n    fn=pamda.add,\n    initial_accumulator=0,\n    data=data\n)\n#=&gt; [1,3,6,10]\n\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fn</span>, </span><span class=\"param\"><span class=\"n\">initial_accumulator</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.add", "modulename": "pamda.pamda", "qualname": "pamda.add", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Adds two numbers</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>a</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: The first number to add</li>\n</ul></li>\n<li><code>b</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: The second number to add</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>pamda.add(1, 2) #=&gt; 3\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.adjust", "modulename": "pamda.pamda", "qualname": "pamda.adjust", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Adjusts an item in a list by applying a function to it</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>index</code>:\n<ul>\n<li>Type: int</li>\n<li>What: The 0 based index of the item in the list to adjust</li>\n<li>Note: Indicies are accepted</li>\n<li>Note: If the index is out of range, picks the (-)first / (+)last item</li>\n</ul></li>\n<li><code>fn</code>:\n<ul>\n<li>Type: function | method</li>\n<li>What: The function to apply the index item to</li>\n<li>Note: This is automatically curried</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: list</li>\n<li>What: The list to adjust</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data=[1,5,9]\npamda.adjust(\n    index=1,\n    fn=pamda.inc,\n    data=data\n) #=&gt; [1,6,9]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">fn</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.assocPath", "modulename": "pamda.pamda", "qualname": "pamda.assocPath", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Ensures a path exists within a nested dictionary</li>\n<li>Note: This updates the object in place, but also returns the object</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>path</code>:\n<ul>\n<li>Type: list[str | int | tuple] | str | int | tuple</li>\n<li>What: The path to check</li>\n<li>Note: If a string is passed, assumes a single item path list with that string</li>\n</ul></li>\n<li><code>value</code>:\n<ul>\n<li>Type: any</li>\n<li>What: The value to appropriate to the end of the path</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: dict</li>\n<li>What: A dictionary in which to associate the given value to the given path</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data={'a':{'b':1}}\npamda.assocPath(path=['a','c'], value=3, data=data) #=&gt; {'a':{'b':1, 'c':3}}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.assocPathComplex", "modulename": "pamda.pamda", "qualname": "pamda.assocPathComplex", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Ensures a path exists within a nested dictionary</li>\n<li>Note: This updates the object in place, but also returns the object</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>default</code>:\n<ul>\n<li>Type: any</li>\n<li>What: The default item to add to a path that does not yet exist</li>\n</ul></li>\n<li><code>default_fn</code>:\n<ul>\n<li>Type: function | method</li>\n<li>What: A unary (single input) function that takes in the current path item (or default) and adjusts it</li>\n<li>Example: <code>lambda x: x</code> # Returns the value in the dict or the default value if none was present</li>\n</ul></li>\n<li><code>path</code>:\n<ul>\n<li>Type: list[str | int | tuple] | str | int | tuple</li>\n<li>What: The path to check</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: dict</li>\n<li>What: A dictionary to check if the path exists</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data={'a':{'b':1}}\npamda.assocPathComplex(default=[2], default_fn=lambda x:x+[1], path=['a','c'], data=data) #=&gt; {'a':{'b':1,'c':[2,1]}}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">default</span>,</span><span class=\"param\">\t<span class=\"n\">default_fn</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.asyncKill", "modulename": "pamda.pamda", "qualname": "pamda.asyncKill", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Kills an asynchronous function that is currently running</li>\n<li>Returns:\n<ul>\n<li><code>None</code> if the function has not yet finished running</li>\n<li>The result of the function if it has finished running</li>\n</ul></li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: thunkified function | thunkified method</li>\n<li>What: The function or method to run asychronously</li>\n<li>Note: The supplied <code>fn</code> must already be asynchronously running</li>\n</ul></li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>See also <code>asyncRun</code> and <code>asyncWait</code></li>\n<li>A thunkified function currently running asynchronously can call <code>asyncKill</code> on itself</li>\n<li>If a function has already finished running, calling <code>asyncKill</code> on it will have no effect</li>\n<li><code>asyncKill</code> does not kill threads that are sleeping (EG: <code>time.sleep</code>), but will kill the thread once the sleep is finished</li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>import time\nfrom pamda import pamda\n\n@pamda.thunkify\ndef test(name, wait):\n    waited = 0\n    while waited &lt; wait:\n        time.sleep(1)\n        waited += 1\n        print(f'{name} has waited {waited} seconds')\n\nasync_test = pamda.asyncRun(test('a',3))\ntime.sleep(1)\npamda.asyncKill(async_test)\n# Alternatively:\n# async_test.asyncKill()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"n\">pamda</span><span class=\"o\">.</span><span class=\"n\">pamda_curry</span><span class=\"o\">.</span><span class=\"n\">curry_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.asyncRun", "modulename": "pamda.pamda", "qualname": "pamda.asyncRun", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Runs the supplied function asychronously</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: thunkified function | thunkified method</li>\n<li>What: The function or method to run asychronously</li>\n<li>Note: The supplied <code>fn</code> must have an arity of 0</li>\n</ul></li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>To pass inputs to a function in asyncRun, first thunkify the function and pass all arguments before calling <code>asyncRun</code> on it</li>\n<li>To get the results of an <code>asyncRun</code> call <code>asyncWait</code></li>\n<li>To kill an <code>asyncRun</code> mid process call <code>asyncKill</code></li>\n<li>A thunkified function with arity of 0 can call <code>asyncRun</code> on itself</li>\n</ul>\n\n<p>Examples:</p>\n\n<p>Input:</p>\n\n<pre><code>import time\n\n@pamda.thunkify\ndef test(name, wait):\n    print(f'{name} start')\n    time.sleep(wait)\n    print(f'{name} end')\n\nasync_test = pamda.asyncRun(test('a',2))\nsync_test = test('b',1)()\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>a start\nb start\nb end\na end\n</code></pre>\n\n<p>Input:</p>\n\n<pre><code>import time\n\n@pamda.thunkify\ndef test(name, wait):\n    time.sleep(wait)\n    return f\"{name}: {wait}\"\n\nasync_test = pamda.asyncRun(test('a',2))\nprint(async_test.asyncWait()) #=&gt; a: 2\n</code></pre>\n\n<p>Input:</p>\n\n<pre><code>import time\n\n@pamda.thunkify\ndef test(name, wait):\n    time.sleep(wait)\n    return f\"{name}: {wait}\"\n\nasync_test = test('a',2).asyncRun()\nprint(async_test.asyncWait()) #=&gt; a: 2\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"n\">pamda</span><span class=\"o\">.</span><span class=\"n\">pamda_curry</span><span class=\"o\">.</span><span class=\"n\">curry_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.asyncWait", "modulename": "pamda.pamda", "qualname": "pamda.asyncWait", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Waits for a supplied function (if needed) and returns the results</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: function | method</li>\n<li>What: The function or method for which to wait</li>\n<li>Note: The supplied <code>fn</code> must have previously called <code>asyncRun</code></li>\n</ul></li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>A thunkified function that has called <code>asyncRun</code> can call <code>asyncWait</code> on itself</li>\n</ul>\n\n<p>Examples:</p>\n\n<pre><code>import time\n\n@pamda.thunkify\ndef test(name, wait):\n    time.sleep(wait)\n    return f\"{name}: {wait}\"\n\nasync_test = pamda.asyncRun(test('a',2))\nprint(pamda.asyncWait(async_test)) #=&gt; a: 2\n</code></pre>\n\n<pre><code>import time\n\n@pamda.thunkify\ndef test(name, wait):\n    time.sleep(wait)\n    return f\"{name}: {wait}\"\n\nasync_test = pamda.asyncRun(test('a',2))\nprint(async_test.asyncWait()) #=&gt; a: 2\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"n\">pamda</span><span class=\"o\">.</span><span class=\"n\">pamda_curry</span><span class=\"o\">.</span><span class=\"n\">curry_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.clamp", "modulename": "pamda.pamda", "qualname": "pamda.clamp", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Forces data to be within minimum and maximum</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>minimum</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: The minimum number</li>\n</ul></li>\n<li><code>maximum</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: The maximum number</li>\n</ul></li>\n<li><code>a</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: The number to clamp</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>pamda.clamp(1, 3, 2) #=&gt; 2\npamda.clamp(1, 3, 5) #=&gt; 3\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">minimum</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">maximum</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.curry", "modulename": "pamda.pamda", "qualname": "pamda.curry", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Curries a function such that inputs can be added interatively</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: function | method</li>\n<li>What: The function or method to curry</li>\n<li>Note: Class methods auto apply self during curry</li>\n</ul></li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>Once curried, the function | method becomes a curry_obj object</li>\n<li>The initial function is only called once all inputs are passed</li>\n</ul>\n\n<p>Examples:</p>\n\n<pre><code>curriedZip=pamda.curry(pamda.zip)\ncurriedZip(['a','b'])([1,2]) #=&gt; [['a',1],['b',2]]\n\n# Curried functions can be thunkified at any time\n# See also thunkify\nzipThunk=curriedZip.thunkify()(['a','b'])([1,2])\nzipThunk() #=&gt; [['a',1],['b',2]]\n</code></pre>\n\n<pre><code>def myFunction(a,b,c):\n    return [a,b,c]\n\ncurriedMyFn=pamda.curry(myFunction)\n\ncurriedMyFn(1,2,3) #=&gt; [1,2,3]\ncurriedMyFn(1)(2,3) #=&gt; [1,2,3]\n\nx=curriedMyFn(1)(2)\nx(3) #=&gt; [1,2,3]\nx(4) #=&gt; [1,2,4]\n\n\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.curryTyped", "modulename": "pamda.pamda", "qualname": "pamda.curryTyped", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Curries a function such that inputs can be added interatively and function annotations are type checked at runtime</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: function | method</li>\n<li>What: The function or method to curry</li>\n<li>Note: Class methods auto apply self during curry</li>\n</ul></li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>Once curried, the function | method becomes a curry_obj object</li>\n<li>The initial function is only called once all inputs are passed</li>\n</ul>\n\n<p>Examples:</p>\n\n<pre><code>@pamda.curryTyped\ndef add(a:int,b:int):\n    return a+b\n\nadd(1)(1) #=&gt; 2\nadd(1)(1.5) #=&gt; Raises type exception\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.dec", "modulename": "pamda.pamda", "qualname": "pamda.dec", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Decrements a number by one</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>a</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: The number to decrement</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>pamda.dec(42) #=&gt; 41\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.difference", "modulename": "pamda.pamda", "qualname": "pamda.difference", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Combines two lists into a list of no duplicate items present in the first list but not the second</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>a</code>:\n<ul>\n<li>Type: list</li>\n<li>What: List of items in which to look for a difference</li>\n</ul></li>\n<li><code>b</code>:\n<ul>\n<li>Type: list</li>\n<li>What: List of items in which to compare when looking for the difference</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>a=['a','b']\nb=['b','c']\npamda.difference(a=a, b=b) #=&gt; ['a']\npamda.difference(a=b, b=a) #=&gt; ['c']\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.dissocPath", "modulename": "pamda.pamda", "qualname": "pamda.dissocPath", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Removes the value at the end of a path within a nested dictionary</li>\n<li>Note: This updates the object in place, but also returns the object</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>path</code>:\n<ul>\n<li>Type: list of strs | str</li>\n<li>What: The path to remove from the dictionary</li>\n<li>Note: If a string is passed, assumes a single item path list with that string</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: dict</li>\n<li>What: A dictionary with a path to be removed</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data={'a':{'b':{'c':0,'d':1}}}\npamda.dissocPath(path=['a','b','c'], data=data) #=&gt; {'a':{'b':{'d':1}}}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.flatten", "modulename": "pamda.pamda", "qualname": "pamda.flatten", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Flattens a list of lists of lists ... into a single list depth first</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>data</code>:\n<ul>\n<li>Type: list of lists</li>\n<li>What: The list of lists to reduce to a single list\nExample:</li>\n</ul></li>\n</ul>\n\n<pre><code>data=[['a','b'],[1,[2]]]\npamda.flatten(data=data) #=&gt; ['a','b',1,2]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.flip", "modulename": "pamda.pamda", "qualname": "pamda.flip", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Returns a new function equivalent to the supplied function except that the first two inputs are flipped</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: function | method</li>\n<li>What: The function or method to flip</li>\n<li>Note: This function must have an arity of at least 2 (take two inputs)</li>\n<li>Note: Only args are flipped, kwargs are passed as normal</li>\n</ul></li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>Input functions are not flipped in place</li>\n<li>The returned function is a flipped version of the input function</li>\n<li>A curried function can be flipped in place by calling fn.flip()</li>\n<li>A function can be flipped multiple times:\n<ul>\n<li>At each flip, the first and second inputs for the function as it is currently curried are switched</li>\n<li>Flipping a function two times before adding an input will return the initial value</li>\n</ul></li>\n</ul>\n\n<p>Examples:</p>\n\n<pre><code>def concat(a,b,c,d):\n    return str(a)+str(b)+str(c)+str(d)\n\nflip_concat=pamda.flip(concat)\n\nconcat('fe-','fi-','fo-','fum') #=&gt; 'fe-fi-fo-fum'\nflip_concat('fe-','fi-','fo-','fum') #=&gt; 'fi-fe-fo-fum'\n</code></pre>\n\n<pre><code>@pamda.curry\ndef concat(a,b,c,d):\n    return str(a)+str(b)+str(c)+str(d)\n\nconcat('fe-','fi-','fo-','fum') #=&gt; 'fe-fi-fo-fum'\n\nconcat.flip()\n\nconcat('fe-','fi-','fo-','fum') #=&gt; 'fi-fe-fo-fum'\n</code></pre>\n\n<pre><code>@pamda.curry\ndef concat(a,b,c,d):\n    return str(a)+str(b)+str(c)+str(d)\n\na=pamda.flip(concat)('fi-')\nb=pamda.flip(a)('fo-')\nc=pamda.flip(b)('fum')\nc('fe-') #=&gt; 'fe-fi-fo-fum'\n</code></pre>\n\n<pre><code>def concat(a,b,c,d):\n    return str(a)+str(b)+str(c)+str(d)\n\na=pamda.flip(concat)('fi-').flip()('fo-').flip()('fum')\na('fe-') #=&gt; 'fe-fi-fo-fum'\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.getArity", "modulename": "pamda.pamda", "qualname": "pamda.getArity", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Gets the arity (number of inputs left to be specified) of a function or method (curried or uncurried)</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: function | method</li>\n<li>What: The function or method to get the arity of</li>\n<li>Note: Class methods remove one arity to account for self</li>\n</ul></li>\n</ul>\n\n<p>Examples:</p>\n\n<pre><code>pamda.getArity(pamda.zip) #=&gt; 2\ncurriedZip=pamda.curry(pamda.zip)\nABCuriedZip=curriedZip(['a','b'])\npamda.getArity(ABCuriedZip) #=&gt; 1\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.groupBy", "modulename": "pamda.pamda", "qualname": "pamda.groupBy", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Splits a list into a dictionary of sublists keyed by the return string of a provided function</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: function | method</li>\n<li>What: The function or method to group by</li>\n<li>Note: Must return a string (or other hashable object)</li>\n<li>Note: This function must be unary (take one input)</li>\n<li>Note: This function is applied to each item in the list recursively</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: list</li>\n<li>What: List of items to apply the function to and then group by the results</li>\n</ul></li>\n</ul>\n\n<p>Examples:</p>\n\n<pre><code>def getGrade(item):\n    score=item['score']\n    if score&gt;90:\n        return 'A'\n    elif score&gt;80:\n        return 'B'\n    elif score&gt;70:\n        return 'C'\n    elif score&gt;60:\n        return 'D'\n    else:\n        return 'F'\n\ndata=[\n    {'name':'Connor', 'score':75},\n    {'name':'Fred', 'score':79},\n    {'name':'Joe', 'score':84},\n]\npamda.groupBy(getGrade,data)\n#=&gt;{\n#=&gt;    'B':[{'name':'Joe', 'score':84}]\n#=&gt;    'C':[{'name':'Connor', 'score':75},{'name':'Fred', 'score':79}]\n#=&gt;}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fn</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.groupKeys", "modulename": "pamda.pamda", "qualname": "pamda.groupKeys", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Splits a list of dicts into a list of sublists of dicts separated by values with equal keys</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>keys</code>:\n<ul>\n<li>Type: list of strs</li>\n<li>What: The keys to group by</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: list of dicts</li>\n<li>What: List of dictionaries with which to match keys</li>\n</ul></li>\n</ul>\n\n<p>Examples:</p>\n\n<pre><code>data=[\n    {'color':'red', 'size':9, 'shape':'ball'},\n    {'color':'red', 'size':10, 'shape':'ball'},\n    {'color':'green', 'size':11, 'shape':'ball'},\n    {'color':'green', 'size':12, 'shape':'square'}\n]\npamda.groupKeys(['color','shape'],data)\n#=&gt; [\n#=&gt;     [{'color': 'red', 'size': 9, 'shape': 'ball'}, {'color': 'red', 'size': 10, 'shape': 'ball'}],\n#=&gt;     [{'color': 'green', 'size': 11, 'shape': 'ball'}],\n#=&gt;     [{'color': 'green', 'size': 12, 'shape': 'square'}]\n#=&gt; ]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keys</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.groupWith", "modulename": "pamda.pamda", "qualname": "pamda.groupWith", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Splits a list into a list of sublists where each sublist is determined by adjacent pairwise comparisons from a provided function</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: function | method</li>\n<li>What: The function or method to groub with</li>\n<li>Note: Must return a boolean value</li>\n<li>Note: This function must have an arity of two (take two inputs)</li>\n<li>Note: This function is applied to each item plus the next adjacent item in the list recursively</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: list</li>\n<li>What: List of items to apply the function to and then group the results</li>\n</ul></li>\n</ul>\n\n<p>Examples:</p>\n\n<pre><code>def areEqual(a,b):\n    return a==b\n\ndata=[1,2,3,1,1,2,2,3,3,3]\npamda.groupWith(areEqual,data) #=&gt; [[1], [2], [3], [1, 1], [2, 2], [3, 3, 3]]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fn</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.hasPath", "modulename": "pamda.pamda", "qualname": "pamda.hasPath", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Checks if a path exists within a nested dictionary</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>path</code>:\n<ul>\n<li>Type: list of strs | str</li>\n<li>What: The path to check</li>\n<li>Note: If a string is passed, assumes a single item path list with that string</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: dict</li>\n<li>What: A dictionary to check if the path exists</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data={'a':{'b':1}}\npamda.hasPath(path=['a','b'], data=data) #=&gt; True\npamda.hasPath(path=['a','d'], data=data) #=&gt; False\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.hardRound", "modulename": "pamda.pamda", "qualname": "pamda.hardRound", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Rounds to a set number of decimal places regardless of floating point math in python</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>decimal_places</code>:\n<ul>\n<li>Type: int</li>\n<li>What: The number of decimal places to round to</li>\n<li>Default: 0</li>\n<li>Notes: Negative numbers accepted (EG -1 rounds to the nearest 10)</li>\n</ul></li>\n<li><code>a</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: The number to round</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>a=12.345\npamda.hardRound(1,a) #=&gt; 12.3\npamda.hardRound(-1,a) #=&gt; 10\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">decimal_places</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.head", "modulename": "pamda.pamda", "qualname": "pamda.head", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Picks the first item out of a list or string</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>data</code>:\n<ul>\n<li>Type: list | str</li>\n<li>What: A list or string</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data=['fe','fi','fo','fum']\npamda.first(\n    data=data\n) #=&gt; fe\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.inc", "modulename": "pamda.pamda", "qualname": "pamda.inc", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Increments a number by one</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>a</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: The number to increment</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>pamda.inc(42) #=&gt; 43\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.intersection", "modulename": "pamda.pamda", "qualname": "pamda.intersection", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Combines two lists into a list of no duplicates composed of those elements common to both lists</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>a</code>:\n<ul>\n<li>Type: list</li>\n<li>What: List of items in which to look for an intersection</li>\n</ul></li>\n<li><code>b</code>:\n<ul>\n<li>Type: list</li>\n<li>What: List of items in which to look for an intersection</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>a=['a','b']\nb=['b','c']\npamda.intersection(a=a, b=b) #=&gt; ['b']\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.map", "modulename": "pamda.pamda", "qualname": "pamda.map", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Maps a function over a list or a dictionary</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: function | method</li>\n<li>What: The function or method to map over the list or dictionary</li>\n<li>Note: This function should have an arity of 1</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: list | dict</li>\n<li>What: The list or dict of items to map the function over</li>\n</ul></li>\n</ul>\n\n<p>Examples:</p>\n\n<pre><code>data=[1,2,3]\npamda.map(\n    fn=pamda.inc,\n    data=data\n)\n#=&gt; [2,3,4]\n</code></pre>\n\n<pre><code>data={'a':1,'b':2,'c':3}\npamda.map(\n    fn=pamda.inc,\n    data=data\n)\n#=&gt; {'a':2,'b':3,'c':4}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fn</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.mean", "modulename": "pamda.pamda", "qualname": "pamda.mean", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Calculates the mean of a given list</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>data</code>:\n<ul>\n<li>Type: list of (floats | ints)</li>\n<li>What: The list with wich to calculate the mean</li>\n<li>Note: If the length of this list is 0, returns None</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data=[1,2,3]\npamda.mean(data=data)\n#=&gt; 2\n</code></pre>\n\n<pre><code>data=[]\npamda.mean(data=data)\n#=&gt; None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.median", "modulename": "pamda.pamda", "qualname": "pamda.median", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Calculates the median of a given list</li>\n<li>If the length of the list is even, calculates the mean of the two central values</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>data</code>:\n<ul>\n<li>Type: list of (floats | ints)</li>\n<li>What: The list with wich to calculate the mean</li>\n<li>Note: If the length of this list is 0, returns None</li>\n</ul></li>\n</ul>\n\n<p>Examples:</p>\n\n<pre><code>data=[7,2,8,9]\npamda.median(data=data)\n#=&gt; 7.5\n</code></pre>\n\n<pre><code>data=[7,8,9]\npamda.median(data=data)\n#=&gt; 8\n</code></pre>\n\n<pre><code>data=[]\npamda.median(data=data)\n#=&gt; None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.mergeDeep", "modulename": "pamda.pamda", "qualname": "pamda.mergeDeep", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Recursively merges two nested dictionaries keeping all keys at each layer</li>\n<li>Values from <code>update_data</code> are used when keys are present in both dictionaries</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>update_data</code>:\n<ul>\n<li>Type: any</li>\n<li>What: The new data that will take precedence during merging</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: any</li>\n<li>What: The original data that will be merged into</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data={'a':{'b':{'c':'d'},'e':'f'}}\nupdate_data={'a':{'b':{'h':'i'},'e':'g'}}\npamda.mergeDeep(\n    update_data=update_data,\n    data=data\n) #=&gt; {'a':{'b':{'c':'d','h':'i'},'e':'g'}}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">update_data</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.nest", "modulename": "pamda.pamda", "qualname": "pamda.nest", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Nests a list of dictionaries into a nested dictionary</li>\n<li>Similar items are appended to a list in the end of the nested dictionary</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>path_keys</code>:\n<ul>\n<li>Type: list of strs</li>\n<li>What: The variables to pull from each item in data</li>\n<li>Note: Used to build out the nested dicitonary</li>\n<li>Note: Order matters as the nesting occurs in order of variable</li>\n</ul></li>\n<li><code>value_key</code>:\n<ul>\n<li>Type: str</li>\n<li>What: The variable to add to the list at the end of the nested dictionary path</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: list of dicts</li>\n<li>What: A list of dictionaries to use for nesting purposes</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data=[\n    {'x_1':'a','x_2':'b', 'output':'c'},\n    {'x_1':'a','x_2':'b', 'output':'d'},\n    {'x_1':'a','x_2':'e', 'output':'f'}\n]\npamda.nest(\n    path_keys=['x_1','x_2'],\n    value_key='output',\n    data=data\n) #=&gt; {'a':{'b':['c','d'], 'e':['f']}}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path_keys</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">value_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.nestItem", "modulename": "pamda.pamda", "qualname": "pamda.nestItem", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Nests a list of dictionaries into a nested dictionary</li>\n<li>Similar items are appended to a list in the end of the nested dictionary</li>\n<li>Similar to <code>nest</code>, except no values are plucked for the aggregated list</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>path_keys</code>:\n<ul>\n<li>Type: list of strs</li>\n<li>What: The variables to pull from each item in data</li>\n<li>Note: Used to build out the nested dicitonary</li>\n<li>Note: Order matters as the nesting occurs in order of variable</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: list of dicts</li>\n<li>What: A list of dictionaries to use for nesting purposes</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data=[\n    {'x_1':'a','x_2':'b'},\n    {'x_1':'a','x_2':'b'},\n    {'x_1':'a','x_2':'e'}\n]\npamda.nestItem\n    path_keys=['x_1','x_2'],\n    data=data\n)\n#=&gt; {'a': {'b': [{'x_1': 'a', 'x_2': 'b'}, {'x_1': 'a', 'x_2': 'b'}], 'e': [{'x_1': 'a', 'x_2': 'e'}]}}\n\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path_keys</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.path", "modulename": "pamda.pamda", "qualname": "pamda.path", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Returns the value of a path within a nested dictionary or None if the path does not exist</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>path</code>:\n<ul>\n<li>Type: list of strs | str</li>\n<li>What: The path to pull given the data</li>\n<li>Note: If a string is passed, assumes a single item path list with that string</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: dict</li>\n<li>What: A dictionary to get the path from</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data={'a':{'b':1}}\npamda.path(path=['a','b'], data=data) #=&gt; 1\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.pathOr", "modulename": "pamda.pamda", "qualname": "pamda.pathOr", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Returns the value of a path within a nested dictionary or a default value if that path does not exist</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>default</code>:\n<ul>\n<li>Type: any</li>\n<li>What: The object to return if the path does not exist</li>\n</ul></li>\n<li><code>path</code>:\n<ul>\n<li>Type: list of strs | str</li>\n<li>What: The path to pull given the data</li>\n<li>Note: If a string is passed, assumes a single item path list with that string</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: dict</li>\n<li>What: A dictionary to get the path from</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data={'a':{'b':1}}\npamda.path(default=2, path=['a','c'], data=data) #=&gt; 2\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.pipe", "modulename": "pamda.pamda", "qualname": "pamda.pipe", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Pipes data through n functions in order (left to right composition) and returns the output</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fns</code>:\n<ul>\n<li>Type: list of (functions | methods)</li>\n<li>What: The list of functions and methods to pipe the data through</li>\n<li>Notes: The first function in the list can be any arity (accepting any number of inputs)</li>\n<li>Notes: Any further function in the list can only be unary (single input)</li>\n<li>Notes: A function can be curried, but is not required to be</li>\n<li>Notes: You may opt to curry functions and add inputs to make them unary</li>\n</ul></li>\n<li><code>args</code>:\n<ul>\n<li>Type: tuple</li>\n<li>What: a tuple of positional arguments to pass to the first function in <code>fns</code></li>\n</ul></li>\n<li><code>kwargs</code>:\n<ul>\n<li>Type: dict</li>\n<li>What: a dictionary of keyword arguments to pass to the first function in <code>fns</code></li>\n</ul></li>\n</ul>\n\n<p>Examples:</p>\n\n<pre><code>data=['abc','def']\npamda.pipe(fns=[pamda.head, pamda.tail], args=(data), kwargs={}) #=&gt; 'c'\npamda.pipe(fns=[pamda.head, pamda.tail], args=(), kwargs={'data':data}) #=&gt; 'c'\n</code></pre>\n\n<pre><code>data={'a':{'b':'c'}}\ncurriedPath=pamda.curry(pamda.path)\npamda.pipe(fns=[curriedPath('a'), curriedPath('b')], args=(), kwargs={'data':data}) #=&gt; 'c'\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fns</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>, </span><span class=\"param\"><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.pivot", "modulename": "pamda.pamda", "qualname": "pamda.pivot", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Pivots a list of dictionaries into a dictionary of lists</li>\n<li>Pivots a dictionary of lists into a list of dictionaries</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>data</code>:\n<ul>\n<li>Type: list of dicts | dict of lists</li>\n<li>What: The data to pivot</li>\n<li>Note: If a list of dictionaries is passed, all dictionaries must have the same keys</li>\n<li>Note: If a dictionary of lists is passed, all lists must have the same length</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data=[\n    {'a':1,'b':2},\n    {'a':3,'b':4}\n]\npamda.pivot(data=data) #=&gt; {'a':[1,3],'b':[2,4]}\n\ndata={'a':[1,3],'b':[2,4]}\npamda.pivot(data=data)\n#=&gt; [\n#=&gt;     {'a':1,'b':2},\n#=&gt;     {'a':3,'b':4}\n#=&gt; ]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.pluck", "modulename": "pamda.pamda", "qualname": "pamda.pluck", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Returns the values of a path within a list of nested dictionaries</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>path</code>:\n<ul>\n<li>Type: list of strs</li>\n<li>What: The path to pull given the data</li>\n<li>Note: If a string is passed, assumes a single item path list with that string</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: list of dicts</li>\n<li>What: A list of dictionaries to get the path from</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data=[{'a':{'b':1, 'c':'d'}},{'a':{'b':2, 'c':'e'}}]\npamda.pluck(path=['a','b'], data=data) #=&gt; [1,2]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.pluckIf", "modulename": "pamda.pamda", "qualname": "pamda.pluckIf", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Returns the values of a path within a list of nested dictionaries if a path in those same dictionaries matches a value</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: function</li>\n<li>What: A function to take in each item in data and return a boolean</li>\n<li>Note: Only items that return true are plucked</li>\n<li>Note: Should be a unary function (take one input)</li>\n</ul></li>\n<li><code>path</code>:\n<ul>\n<li>Type: list of strs</li>\n<li>What: The path to pull given the data</li>\n<li>Note: If a string is passed, assumes a single item path list with that string</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: list of dicts</li>\n<li>What: A list of dictionary to get the path from</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>\ndata=[{'a':{'b':1, 'c':'d'}},{'a':{'b':2, 'c':'e'}}]\npamda.pluck(fn:lambda x: x['a']['b']==1, path=['a','c'], data=data) #=&gt; ['d']\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fn</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.project", "modulename": "pamda.pamda", "qualname": "pamda.project", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Returns a list of dictionaries with only the keys provided</li>\n<li>Analogous to SQL's <code>SELECT</code> statement</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>keys</code>:\n<ul>\n<li>Type: list of strs</li>\n<li>What: The keys to select from each dictionary in the data list</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: list of dicts</li>\n<li>What: The list of dictionaries to select from</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data=[\n    {'a':1,'b':2,'c':3},\n    {'a':4,'b':5,'c':6}\n]\npamda.project(keys=['a','c'], data=data)\n#=&gt; [\n#=&gt;     {'a':1,'c':3},\n#=&gt;     {'a':4,'c':6}\n#=&gt; ]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keys</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.props", "modulename": "pamda.pamda", "qualname": "pamda.props", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Returns the values of a list of keys within a dictionary</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>keys</code>:\n<ul>\n<li>Type: list of strs</li>\n<li>What: The keys to pull given the data</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: dict</li>\n<li>What: A dictionary to get the keys from</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data={'a':1,'b':2,'c':3}\npamda.props(keys=['a','c'], data=data)\n#=&gt; [1,3]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keys</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.reduce", "modulename": "pamda.pamda", "qualname": "pamda.reduce", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Returns a single item by iterating a function starting with an accumulator over a list</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: function | method</li>\n<li>What: The function or method to reduce</li>\n<li>Note: This function should have an arity of 2 (take two inputs)</li>\n<li>Note: The first input should take the accumulator value</li>\n<li>Note: The second input should take the data value\n-<code>initial_accumulator</code>:</li>\n<li>Type: any</li>\n<li>What: The initial item to pass into the function when starting the accumulation process</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: list</li>\n<li>What: The list of items to iterate over</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data=[1,2,3,4]\npamda.reduce(\n    fn=pamda.add,\n    initial_accumulator=0,\n    data=data\n)\n#=&gt; 10\n\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fn</span>, </span><span class=\"param\"><span class=\"n\">initial_accumulator</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.safeDivide", "modulename": "pamda.pamda", "qualname": "pamda.safeDivide", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Forces division to work by enforcing a denominator of 1 if the provided denominator is zero</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><p><code>denominator</code>:</p>\n\n<ul>\n<li>Type: int | float</li>\n<li>What: The denominator</li>\n</ul></li>\n<li><p><code>a</code>:</p>\n\n<ul>\n<li>Type: int | float</li>\n<li>What: The numerator</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>pamda.safeDivide(2,10) #=&gt; 5\npamda.safeDivide(0,10) #=&gt; 10\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.safeDivideDefault", "modulename": "pamda.pamda", "qualname": "pamda.safeDivideDefault", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Forces division to work by enforcing a non zero default denominator if the provided denominator is zero</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>default_denominator</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: A non zero denominator to use if denominator is zero</li>\n<li>Default: 1</li>\n</ul></li>\n<li><code>denominator</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: The denominator</li>\n</ul></li>\n<li><code>a</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: The numerator</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>pamda.safeDivideDefault(2,5,10) #=&gt; 2\npamda.safeDivideDefault(2,0,10) #=&gt; 5\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">default_denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.symmetricDifference", "modulename": "pamda.pamda", "qualname": "pamda.symmetricDifference", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Combines two lists into a list of no duplicates items present in one list but not the other</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>a</code>:\n<ul>\n<li>Type: list</li>\n<li>What: List of items in which to look for a difference</li>\n</ul></li>\n<li><code>b</code>:\n<ul>\n<li>Type: list</li>\n<li>What: List of items in which to look for a difference</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>a=['a','b']\nb=['b','c']\npamda.symmetricDifference(a=a, b=b) #=&gt; ['a','c']\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.tail", "modulename": "pamda.pamda", "qualname": "pamda.tail", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Picks the last item out of a list or string</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>data</code>:\n<ul>\n<li>Type: list | str</li>\n<li>What: A list or string</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data=['fe','fi','fo','fum']\npamda.tail(\n    data=data\n) #=&gt; fum\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.thunkify", "modulename": "pamda.pamda", "qualname": "pamda.thunkify", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Creates a curried thunk out of a function</li>\n<li>Evaluation of the thunk lazy and is delayed until called</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: function | method</li>\n<li>What: The function or method to thunkify</li>\n<li>Note: Thunkified functions are automatically curried</li>\n<li>Note: Class methods auto apply self during thunkify</li>\n</ul></li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>Input functions are not thunkified in place</li>\n<li>The returned function is a thunkified version of the input function</li>\n<li>A curried function can be thunkified in place by calling fn.thunkify()</li>\n</ul>\n\n<p>Examples:</p>\n\n<pre><code>def add(a,b):\n    return a+b\n\naddThunk=pamda.thunkify(add)\n\nadd(1,2) #=&gt; 3\naddThunk(1,2)\naddThunk(1,2)() #=&gt; 3\n\nx=addThunk(1,2)\nx() #=&gt; 3\n</code></pre>\n\n<pre><code>@pamda.curry\ndef add(a,b):\n    return a+b\n\nadd(1,2) #=&gt; 3\n\nadd.thunkify()\n\nadd(1,2)\nadd(1,2)() #=&gt; 3\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.unnest", "modulename": "pamda.pamda", "qualname": "pamda.unnest", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Removes one level of depth for all items in a list</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>data</code>:\n<ul>\n<li>Type: list</li>\n<li>What: A list of items to unnest by one level</li>\n</ul></li>\n</ul>\n\n<p>Examples:</p>\n\n<pre><code>data=['fe','fi',['fo',['fum']]]\npamda.unnest(\n    data=data\n) #=&gt; ['fe','fi','fo',['fum']]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.zip", "modulename": "pamda.pamda", "qualname": "pamda.zip", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Creates a new list out of the two supplied by pairing up equally-positioned items from both lists</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>a</code>:\n<ul>\n<li>Type: list</li>\n<li>What: List of items to appear in new list first</li>\n</ul></li>\n<li><code>b</code>:\n<ul>\n<li>Type: list</li>\n<li>What: List of items to appear in new list second</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>a=['a','b']\nb=[1,2]\npamda.zip(a=a, b=b) #=&gt; [['a',1],['b',2]]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda.pamda.zipObj", "modulename": "pamda.pamda", "qualname": "pamda.zipObj", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Creates a new dict out of two supplied lists by pairing up equally-positioned items from both lists</li>\n<li>The first list represents keys and the second values</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>a</code>:\n<ul>\n<li>Type: list</li>\n<li>What: List of items to appear in new list first</li>\n</ul></li>\n<li><code>b</code>:\n<ul>\n<li>Type: list</li>\n<li>What: List of items to appear in new list second</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>a=['a','b']\nb=[1,2]\npamda.zipObj(a=a, b=b) #=&gt; {'a':1, 'b':2}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_curry", "modulename": "pamda.pamda_curry", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pamda.pamda_curry.curry_obj", "modulename": "pamda.pamda_curry", "qualname": "curry_obj", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pamda.pamda_curry.curry_obj.__init__", "modulename": "pamda.pamda_curry", "qualname": "curry_obj.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">__fn__</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">__args__</span>,</span><span class=\"param\">\t<span class=\"n\">__flips__</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">__fnExecute__</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">__isThunk__</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">__isTypeEnforced__</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">__kwargs__</span></span>)</span>"}, {"fullname": "pamda.pamda_curry.curry_obj.thunkify", "modulename": "pamda.pamda_curry", "qualname": "curry_obj.thunkify", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_curry.curry_obj.flip", "modulename": "pamda.pamda_curry", "qualname": "curry_obj.flip", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_curry.curry_obj.typeEnforce", "modulename": "pamda.pamda_curry", "qualname": "curry_obj.typeEnforce", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_curry.curry_obj.asyncRun", "modulename": "pamda.pamda_curry", "qualname": "curry_obj.asyncRun", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">daemon</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_curry.curry_obj.asyncWait", "modulename": "pamda.pamda_curry", "qualname": "curry_obj.asyncWait", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_curry.curry_obj.asyncKill", "modulename": "pamda.pamda_curry", "qualname": "curry_obj.asyncKill", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_fast", "modulename": "pamda.pamda_fast", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pamda.pamda_timer", "modulename": "pamda.pamda_timer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pamda.pamda_timer.PamdaTimer", "modulename": "pamda.pamda_timer", "qualname": "PamdaTimer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pamda.pamda_timer.PamdaTimer.__init__", "modulename": "pamda.pamda_timer", "qualname": "PamdaTimer.__init__", "kind": "function", "doc": "<p>Function:</p>\n\n<p>Initialize a pamda_timer object.</p>\n\n<ul>\n<li>Note: This object is used for bare minimum in script timing purposes.</li>\n</ul>\n\n<p>Required:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: function | method</li>\n<li>What: The name of the process being timed</li>\n</ul></li>\n</ul>\n\n<p>Optional:</p>\n\n<ul>\n<li><code>units</code>:\n<ul>\n<li>Type: str</li>\n<li>What: The units for the time measurement. Can be \"s\" (seconds), \"ms\" (milliseconds), or \"us\" (microseconds). Default is \"ms\".</li>\n</ul></li>\n<li><code>iterations</code>:\n<ul>\n<li>Type: int</li>\n<li>What: The number of iterations to run the function when getting time statistics. Default is 1.</li>\n</ul></li>\n<li><code>print_call</code>:\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to print the function call time when this object is called. Default is True.</li>\n</ul></li>\n<li><code>print_time_stats</code>:\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to print a simple output line for get_time_stats after all iterations run. Default is False.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">__fn__</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">&#39;ms&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">print_call</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">print_time_stats</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "pamda.pamda_timer.PamdaTimer.units", "modulename": "pamda.pamda_timer", "qualname": "PamdaTimer.units", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pamda.pamda_timer.PamdaTimer.iterations", "modulename": "pamda.pamda_timer", "qualname": "PamdaTimer.iterations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pamda.pamda_timer.PamdaTimer.print_call", "modulename": "pamda.pamda_timer", "qualname": "PamdaTimer.print_call", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pamda.pamda_timer.PamdaTimer.print_time_stats", "modulename": "pamda.pamda_timer", "qualname": "PamdaTimer.print_time_stats", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pamda.pamda_timer.PamdaTimer.get_time_stats", "modulename": "pamda.pamda_timer", "qualname": "PamdaTimer.get_time_stats", "kind": "function", "doc": "<p>Function:</p>\n\n<p>Get the time statistics of the function given the number of iterations (specified during initialization).</p>\n\n<p>Optional:</p>\n\n<ul>\n<li><code>args</code>:\n<ul>\n<li>Type: any</li>\n<li>What: The arguments to pass to the function</li>\n</ul></li>\n<li><code>kwargs</code>:\n<ul>\n<li>Type: any</li>\n<li>What: The keyword arguments to pass to the function</li>\n</ul></li>\n</ul>\n\n<p>Returns:\n    - A dictionary containing the:\n        - module: (str) - The module where the function is defined\n        - function: (str) - The name of the function being timed\n        - unit: (str) - The time unit used for measurements\n        - iterations: (int) - The number of iterations run\n        - avg: (float) - The average time taken per iteration in the specified units\n        - min: (float) - The minimum time taken for a single iteration in the specified units\n        - max: (float) - The maximum time taken for a single iteration in the specified units\n        - std: (float) - The standard deviation of time taken by the function in the specified units\n        - raw: (list[float]) - The raw timing history in the specified units</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_timer.pamda_timer", "modulename": "pamda.pamda_timer", "qualname": "pamda_timer", "kind": "function", "doc": "<p>Function:\nCreate a pamda_timer object.\nA wrapper function to create a pamda_timer object with the specified parameters.</p>\n\n<p>Optional:</p>\n\n<ul>\n<li><code>units</code>: str, the units for the time measurement (default is \"ms\")</li>\n<li><code>iterations</code>: int, the number of iterations to run the function when getting time statistics (default is 1)</li>\n<li><code>print_call</code>: bool, whether to print the function call time when this object is called (default is True)</li>\n<li><code>print_time_stats</code>: bool, whether to print the time statistics when get_time_stats is called (default is False)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fn</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">&#39;ms&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">print_call</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">print_time_stats</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_utils", "modulename": "pamda.pamda_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pamda.pamda_utils.pamda_utils", "modulename": "pamda.pamda_utils", "qualname": "pamda_utils", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pamda.pamda_utils.pamda_utils.read_csv", "modulename": "pamda.pamda_utils", "qualname": "pamda_utils.read_csv", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Reads the contents of a csv and converts it to list of dicts or list of lists</li>\n<li>Note: The csv must have a header row indicating the names of each column</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>filename</code>:\n<ul>\n<li>Type: str</li>\n<li>What: The filepath of the csv to read\n<ul>\n<li>Note: The first row of the csv must be the header row</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p>Optional:</p>\n\n<ul>\n<li><code>return_dict</code>:\n<ul>\n<li>Type: bool</li>\n<li>What: Flag to indicate if the csv should be converted to:\n<ul>\n<li>True: list of dicts (with each key being the associated column header)</li>\n<li>False: list of lists (with the first row being the headers)</li>\n</ul></li>\n<li>Default: True</li>\n<li>Notes:\n<ul>\n<li>This has been deprecated in favor of <code>return_type</code></li>\n<li>This has been kept for backwards compatibility</li>\n<li>If return_type is specified, this will be ignored</li>\n</ul></li>\n</ul></li>\n<li><code>return_type</code>:\n<ul>\n<li>Type: str</li>\n<li>Options:\n<ul>\n<li><code>list_of_dicts</code> (default if <code>return_dict</code> is True)\n<ul>\n<li>A list of dictionaries with each key being the associated column header</li>\n</ul></li>\n<li><code>dict_of_lists</code>\n<ul>\n<li>A dictionary of lists with each key being the associated column header and each value being a list of the values in that column</li>\n</ul></li>\n<li><code>list_of_row_lists</code>\n<ul>\n<li>A list of lists (records) with each row being a list of the values in that row</li>\n<li>The first row is the header row</li>\n</ul></li>\n<li><code>list_of_col_lists</code>\n<ul>\n<li>A list of lists (columns) with each column being a list of the values in that column</li>\n<li>The first item in each sublist is the header for that column</li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li><code>cast_items</code>:\n<ul>\n<li>Type: bool</li>\n<li>What: Flag to indicate if an attempt to cast each item to a proper type</li>\n<li>Default: True</li>\n<li>Note: This is useful for converting strings to ints, floats, etc.</li>\n<li>Note: This works in conjunction with <code>cast_dict</code>\n<ul>\n<li>If <code>cast_dict</code> is not None, then an automated attempt to cast the items will be made</li>\n<li>For automated casting, the following rules are applied to each item in the data:\n<ul>\n<li>If the item is a string:\n<ul>\n<li>If the string is empty, <code>None</code> will be returned</li>\n<li>If the string is \"None\" or \"null\", <code>None</code> will be returned</li>\n<li>If the string is \"True\" or \"true\", <code>True</code> will be returned</li>\n<li>If the string is \"False\" or \"false\", <code>False</code> will be returned</li>\n<li>If the string is a valid float, the float will be returned</li>\n<li>If the string is a valid int, the int will be returned</li>\n<li>Otherwise, the string will be returned</li>\n</ul></li>\n<li>If the item is not a string, it will be returned as is</li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li><code>cast_dict</code>:\n<ul>\n<li>Type: dict</li>\n<li>What: A dictionary of functions to cast each column (by name) in the csv</li>\n<li>Default: None</li>\n<li>Note: Unspecified column names will be treated as strings</li>\n<li>Note: <code>cast_items</code> must be <code>True</code> to use this</li>\n<li>EG: {\n'user_id': lambda x: int(x),\n'year': lambda x: int(x),\n'pass': lambda x: x.lower()=='true',\n}</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">return_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cast_items</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cast_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_utils.pamda_utils.write_csv", "modulename": "pamda.pamda_utils", "qualname": "pamda_utils.write_csv", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Writes the contents of a list of list or list of dicts to a csv</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>filename</code>:\n<ul>\n<li>Type: str</li>\n<li>What: The filepath of the csv to read</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: list of lists | list of dicts</li>\n<li>What: The data to write</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_utils.pamda_utils.read_json", "modulename": "pamda.pamda_utils", "qualname": "pamda_utils.read_json", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Reads the contents of a json</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>filename</code>:\n<ul>\n<li>Type: str</li>\n<li>What: The filepath of the json to read</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_utils.pamda_utils.write_json", "modulename": "pamda.pamda_utils", "qualname": "pamda_utils.write_json", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Writes the contents of a list of list or list of dicts to a json</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>filename</code>:\n<ul>\n<li>Type: str</li>\n<li>What: The filepath of the json to write</li>\n</ul></li>\n<li><code>data</code>:\n<ul>\n<li>Type: A json serializable python object</li>\n<li>What: The data to write</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">pretty</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_utils.pamda_utils.getMethods", "modulename": "pamda.pamda_utils", "qualname": "pamda_utils.getMethods", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Returns the callable methods of a class (dunder-excluded) as a list of strs</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>object</code>:\n<ul>\n<li>Type: any</li>\n<li>What: Any python object</li>\n<li>Default: 1</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>class MyClass:\n    def A(self):\n        pass\n\n    def B(self):\n        pass\n\n\npamda.getMethods(MyClass) #=&gt; ['A', 'B']\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">object</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_utils.pamda_utils.getForceDict", "modulename": "pamda.pamda_utils", "qualname": "pamda_utils.getForceDict", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Returns a value from a dictionary (or list) given a key (or index)  and forces that value to be a dictionary if it is not a dictionary (or a list)</li>\n<li>Note: This updates the object in place to force the value from the key to be a dictionary</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>object</code>:\n<ul>\n<li>Type: dict | list</li>\n<li>What: The object from which to look for a key or index</li>\n</ul></li>\n<li><code>key</code>:\n<ul>\n<li>Type: str | int</li>\n<li>What: The key or index to look up in the object</li>\n</ul></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>data = {'a':{}, 'b':1, 'c':[]}\n\npamda.getForceDict(data, 'a') #=&gt; {}\npamda.getForceDict(data, 'b') #=&gt; {}\npamda.getForceDict(data, 'c') #=&gt; []\n\n# Note that the object has been updated in place\ndata #=&gt; {'a':{}, 'b':{}, 'c':[]}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">object</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_wrappers", "modulename": "pamda.pamda_wrappers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pamda.pamda_wrappers.typed_curry_wrap", "modulename": "pamda.pamda_wrappers", "qualname": "typed_curry_wrap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">clsFnMethod</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_wrappers.staticmethod_wrap", "modulename": "pamda.pamda_wrappers", "qualname": "staticmethod_wrap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">clsFnMethod</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pamda.pamda_wrappers.classmethod_wrap", "modulename": "pamda.pamda_wrappers", "qualname": "classmethod_wrap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">clsFnMethod</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();